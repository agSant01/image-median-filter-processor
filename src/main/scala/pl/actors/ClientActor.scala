package pl.actors

import java.awt.{BorderLayout, GridBagLayout, Image, Toolkit}

import akka.actor.{Actor, ActorRef, CoordinatedShutdown, Props}
import javax.swing._
import org.slf4j.{Logger, LoggerFactory}
import pl.utils
import pl.utils.FileReader

class ClientActor extends Actor {

  // necesary to know when both Filters Finished
  private var asyncFinished: Boolean = false
  private var syncFinished: Boolean = false

  // instantiate both Filters
  private val syncFilterActor: ActorRef = this.context.system.actorOf(Props[SyncServerActor](), "SyncServer")
  private val asyncFilterActor: ActorRef = this.context.system.actorOf(Props[AsyncServerActor](), "AsyncServer")

  // watch them
  this.context.watch(syncFilterActor)
  this.context.watch(asyncFilterActor)

  // logger
  val log: Logger = LoggerFactory.getLogger(this.getClass)

  override def receive: Receive = {
    case AskForFile =>
      // process to ask user for file
      val userInput = JOptionPane.showInputDialog(
        null,
        "Welcome to the Custom Median Filter for ICOM-4036 Course.\nPlase enter the full path of the image you want to apply a Median Filter to:",
        "Median Filter Dashboard", JOptionPane.INFORMATION_MESSAGE
      )

      // validate input
      if (userInput == null || userInput.toLowerCase().equals("exit")) {
        self ! RestartProcess
      }

      self ! LoadFile(userInput)

    case LoadFile(filepath) =>
      try {
        // load both picture into 2 diferent Readers
        val asyncFileReader: FileReader = new FileReader(filepath)
        val syncFileReader: FileReader = new FileReader(filepath)

        asyncFinished = false
        syncFinished = false

        // send message to both Filter Actors,
        syncFilterActor ! StartSyncFilter(syncFileReader, self)
        asyncFilterActor ! StartAsyncFilter(asyncFileReader, self)
      } catch {
        case ioEx: javax.imageio.IIOException => {
          log.error("Could not find File error.%s".format(ioEx))
          JOptionPane.showMessageDialog(null,
            "Error Loading file. Verify file path\n\nError: %s".format(ioEx),
            "ERROR", JOptionPane.ERROR_MESSAGE
          )
          self ! RestartProcess
        }
        case e: Exception => {
          log.error("Got an unexpected Exception: %s".format(e))
          JOptionPane.showMessageDialog(null,
            "Unexpected Error.\n\nError: %s".format(e
            ),
            "ERROR", JOptionPane.ERROR_MESSAGE
          )
          self ! Terminate
        }
      }

    case ShowResult(fileReader, timer: utils.Timer, isAsync: Boolean) =>
      // resceive result with time and show output to user
      var title: String = null
      val msg: String = "Duration was: %s\nPath of saved Image: %s".format(timer.getSeconds, fileReader.getSavedPath)

      if (isAsync) {
        title = "Image generated by the Parallelized Median Filter"
      } else {
        title = "Image generated by the Serial Median Filter"
      }

      SwingUtilities.invokeLater(new Runnable() {
        override def run(): Unit = {
          log.debug(msg)
          showGeneratedImage(fileReader, title, msg)
        }
      })

      if (isAsync) {
        asyncFinished = true
      } else {
        syncFinished = true
      }

      if (asyncFinished && syncFinished) {
        self ! RestartProcess
      }

    case RestartProcess =>
      self ! AskForFile

    case Terminate =>
      println("Terminating.")
      CoordinatedShutdown(system = this.context.system)
      this.context.system.terminate()
      sys.exit(0)

    case _ =>
      println("Unknown message. Terminating.")
      CoordinatedShutdown(system = this.context.system)
  }


  def showGeneratedImage(reader: FileReader, title: String, message: String): Unit = {
    val screenSize = Toolkit.getDefaultToolkit.getScreenSize
    val image = scaleImage(new ImageIcon(reader.getSavedPath),
      (screenSize.width * 0.50).toInt, (screenSize.height * 0.50).toInt)

    val label: JLabel = new JLabel(image)

    val imagePanel: JPanel = new JPanel(new GridBagLayout());
    imagePanel.add(label)

    val finalPanel = new JPanel(new BorderLayout())
    finalPanel.add(new JLabel(message))
    finalPanel.add(imagePanel, BorderLayout.SOUTH)

    JOptionPane.showMessageDialog(
      null,
      finalPanel,
      title,
      JOptionPane.DEFAULT_OPTION
    )
  }

  def scaleImage(icon: ImageIcon, w: Int, h: Int): ImageIcon = {
    var nw = icon.getIconWidth
    var nh = icon.getIconHeight
    if (icon.getIconWidth > w) {
      nw = w
      nh = (nw * icon.getIconHeight) / icon.getIconWidth
    }
    if (nh > h) {
      nh = h
      nw = (icon.getIconWidth * nh) / icon.getIconHeight
    }
    new ImageIcon(icon.getImage.getScaledInstance(nw, nh, Image.SCALE_DEFAULT))
  }
}
